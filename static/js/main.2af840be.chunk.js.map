{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","api/Posts.ts","App.tsx","api/Users.ts","api/Comments.ts","index.tsx"],"names":["PostsList","posts","handleSelectedPost","selectedPostId","className","map","post","id","title","type","onClick","Loader","NewCommentForm","handleCommentAdd","isCommentAdding","useState","author","setAuthor","email","setEmail","comment","setComment","isAuthorError","setAuthorError","isEmailError","setEmailError","isCommentError","setCommentError","onSubmit","e","preventDefault","handleSubmit","htmlFor","name","placeholder","classNames","value","onChange","target","PostDetails","comments","isLoader","isFormVisable","handleFormVisability","handleCommentDelete","isCommentsLoadingError","isCommentAddError","isCommentDeleteError","body","hasComments","Boolean","length","hasNoComments","isButtonVisbale","href","UserSelector","users","setSelectedUser","selectedUserId","isOpen","setIsOpen","selectedUser","find","user","role","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","getPosts","userId","App","setUsers","setSelectedUserId","setPosts","setLoader","setSelectedPostId","setComments","postLoadingError","setPostLoadingError","setCommentsLoadingError","setCommentAddError","setCommentDeleteError","isCommentsLoader","setCommentsLoader","isFormVisible","setFormVisability","setCommentAdding","isPostListVisible","hasNoPosts","selectedPost","useEffect","handleSelectedUser","a","postId","getComments","boolean","newComment","addComment","currentComments","commentId","filter","deleteComment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2af840be.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  handleSelectedPost: (postId: number) => void,\n  selectedPostId: number,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  handleSelectedPost,\n  selectedPostId,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n      <table\n        className=\"table is-fullwidth is-striped is-hoverable is-narrow\"\n      >\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n        <tbody>\n          {posts.map((post) => (\n            <tr\n              data-cy=\"Post\"\n              key={post.id}\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {post.id === selectedPostId\n                  ? (\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link\"\n                      onClick={() => {\n                        handleSelectedPost(0);\n                      }}\n                    >\n                      Close\n                    </button>\n                  )\n                  : (\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link is-light\"\n                      onClick={() => {\n                        handleSelectedPost(post.id);\n                      }}\n                    >\n                      Open\n                    </button>\n                  )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  handleCommentAdd: (author: string, email: string, comment: string) => void,\n  isCommentAdding: boolean,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  handleCommentAdd,\n  isCommentAdding,\n}) => {\n  const [author, setAuthor] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n\n  const [isAuthorError, setAuthorError] = useState(false);\n  const [isEmailError, setEmailError] = useState(false);\n  const [isCommentError, setCommentError] = useState(false);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (author && email && comment) {\n      handleCommentAdd(author, email, comment);\n      setComment('');\n    }\n\n    if (!author) {\n      setAuthorError(true);\n    }\n\n    if (!email) {\n      setEmailError(true);\n    }\n\n    if (!comment) {\n      setCommentError(true);\n    }\n  };\n\n  const handleClear = () => {\n    setAuthorError(false);\n    setEmailError(false);\n    setCommentError(false);\n    setAuthor('');\n    setEmail('');\n    setComment('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(e) => {\n        handleSubmit(e);\n      }}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': isAuthorError,\n            })}\n            value={author}\n            onChange={(e) => {\n              setAuthor(e.target.value);\n              setAuthorError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isAuthorError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isAuthorError && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isEmailError,\n            })}\n            value={email}\n            onChange={(e) => {\n              setEmail(e.target.value);\n              setEmailError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isCommentError,\n            })}\n            value={comment}\n            onChange={(e) => {\n              setComment(e.target.value);\n              setCommentError(false);\n            }}\n          />\n        </div>\n\n        {isCommentError && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isCommentAdding,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => {\n              handleClear();\n            }}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  post: Post,\n  comments: Comment[],\n  isLoader: boolean,\n  isFormVisable: boolean,\n  handleFormVisability: (boolean: boolean) => void,\n  handleCommentAdd: (author: string, email: string, comment: string) => void,\n  isCommentAdding: boolean,\n  handleCommentDelete: (commentId: number) => void,\n  isCommentsLoadingError: boolean,\n  isCommentAddError: boolean,\n  isCommentDeleteError: boolean,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  comments,\n  isLoader,\n  isFormVisable,\n  handleFormVisability,\n  handleCommentAdd,\n  isCommentAdding,\n  handleCommentDelete,\n  isCommentsLoadingError,\n  isCommentAddError,\n  isCommentDeleteError,\n}) => {\n  const { id, body, title } = post;\n\n  const hasComments = Boolean(comments.length && !isLoader);\n  const hasNoComments = Boolean(!comments.length && !isLoader);\n  const isButtonVisbale = !isFormVisable && !isLoader;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        {isLoader && <Loader />}\n\n        {isCommentsLoadingError && (\n          <div\n            className=\"notification is-danger\"\n            data-cy=\"CommentsError\"\n          >\n            Something went wrong\n          </div>\n        )}\n\n        {isCommentAddError && (\n          <div\n            className=\"notification is-danger\"\n            data-cy=\"CommentsError\"\n          >\n            Unable to add a todo\n          </div>\n        )}\n\n        {isCommentDeleteError && (\n          <div\n            className=\"notification is-danger\"\n            data-cy=\"CommentsError\"\n          >\n            Unable to delete a todo\n          </div>\n        )}\n\n        {hasComments && (\n          <div className=\"block\">\n            <p className=\"title is-4\">Comments:</p>\n\n            {comments.map((comment) => (\n              <article\n                className=\"message is-small\"\n                key={comment.id}\n                data-cy=\"Comment\"\n              >\n                <div className=\"message-header\">\n                  <a\n                    href=\"mailto:misha@mate.academy\"\n                    data-cy=\"CommentAuthor\"\n                  >\n                    {comment.name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => {\n                      handleCommentDelete(comment.id);\n                    }}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div\n                  className=\"message-body\"\n                  data-cy=\"CommentBody\"\n                >\n                  {comment.body}\n                </div>\n              </article>\n            ))}\n          </div>\n        )}\n\n        {hasNoComments && (\n          <p\n            className=\"title is-4\"\n            data-cy=\"NoCommentsMessage\"\n          >\n            No comments yet\n          </p>\n        )}\n        {isButtonVisbale && (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => {\n              handleFormVisability(true);\n            }}\n          >\n            Write a comment\n          </button>\n        )}\n\n        {isFormVisable && (\n          <NewCommentForm\n            handleCommentAdd={handleCommentAdd}\n            isCommentAdding={isCommentAdding}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  setSelectedUser: (userId: number) => void,\n  selectedUserId: number,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  setSelectedUser,\n  selectedUserId,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const selectedUser = users.find((user) => user.id === selectedUserId);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isOpen,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setIsOpen(!isOpen);\n          }}\n        >\n          <span>\n            {selectedUser\n              ? selectedUser.name\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user) => (\n            <a\n              key={user.id}\n              href={`mailto:${user.email}`}\n              className={classNames('dropdown-item', {\n                'is-active': selectedUserId === user.id,\n              })}\n              onClick={() => {\n                setSelectedUser(user.id);\n                setIsOpen(!isOpen);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { User } from './types/User';\nimport { getUsers } from './api/Users';\nimport { getPosts } from './api/Posts';\nimport { Post } from './types/Post';\nimport { Loader } from './components/Loader';\nimport { Comment } from './types/Comment';\nimport { addComment, deleteComment, getComments } from './api/Comments';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoader, setLoader] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [comments, setComments] = useState<Comment []>([]);\n  const [postLoadingError, setPostLoadingError] = useState(false);\n  const [isCommentsLoadingError, setCommentsLoadingError] = useState(false);\n  const [isCommentAddError, setCommentAddError] = useState(false);\n  const [isCommentDeleteError, setCommentDeleteError] = useState(false);\n  const [isCommentsLoader, setCommentsLoader] = useState(false);\n  const [isFormVisible, setFormVisability] = useState(false);\n  const [isCommentAdding, setCommentAdding] = useState(false);\n\n  const isPostListVisible = Boolean(!isLoader\n    && posts.length && selectedUserId);\n\n  const hasNoPosts = Boolean(!isLoader && selectedUserId && !posts.length);\n\n  const selectedPost = posts.find((post) => post.id === selectedPostId);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n  }, []);\n\n  const handleSelectedUser = async (userId: number) => {\n    setLoader(true);\n    setSelectedUserId(userId);\n    setSelectedPostId(0);\n\n    try {\n      getPosts(userId).then(setPosts);\n    } catch {\n      setPostLoadingError(true);\n    } finally {\n      setLoader(false);\n    }\n  };\n\n  const handleSelectedPost = (postId: number) => {\n    setFormVisability(false);\n    setCommentsLoader(true);\n    setSelectedPostId(postId);\n    try {\n      getComments(postId).then(setComments);\n    } catch {\n      setCommentsLoadingError(true);\n    } finally {\n      setCommentsLoader(false);\n    }\n  };\n\n  const handleFormVisability = (boolean: boolean) => {\n    setFormVisability(boolean);\n  };\n\n  const handleCommentAdd = (\n    author: string,\n    email: string,\n    comment: string,\n  ) => {\n    setCommentAdding(true);\n    const newComment = {\n      id: 0,\n      postId: selectedPostId,\n      name: author,\n      email,\n      body: comment,\n    };\n\n    try {\n      addComment(selectedPostId, newComment);\n      setComments((currentComments) => [...currentComments, newComment]);\n    } catch {\n      setCommentAddError(true);\n    } finally {\n      setCommentAdding(false);\n    }\n  };\n\n  const handleCommentDelete = (commentId: number) => {\n    try {\n      setComments((currentComments) => (\n        currentComments.filter((comment) => comment.id !== commentId)\n      ));\n      deleteComment(commentId);\n    } catch {\n      setCommentDeleteError(true);\n    }\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  setSelectedUser={handleSelectedUser}\n                  selectedUserId={selectedUserId}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n\n                {isLoader && <Loader />}\n\n                {!selectedUserId && (\n                  <p\n                    data-cy=\"NoSelectedUser\"\n                  >\n                    No user selected\n                  </p>\n                )}\n\n                {isPostListVisible && (\n                  <PostsList\n                    posts={posts}\n                    handleSelectedPost={handleSelectedPost}\n                    selectedPostId={selectedPostId}\n                  />\n                )}\n\n                {hasNoPosts && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {postLoadingError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={selectedPost}\n                  comments={comments}\n                  isLoader={isCommentsLoader}\n                  isFormVisable={isFormVisible}\n                  handleFormVisability={handleFormVisability}\n                  handleCommentAdd={handleCommentAdd}\n                  isCommentAdding={isCommentAdding}\n                  handleCommentDelete={handleCommentDelete}\n                  isCommentsLoadingError={isCommentsLoadingError}\n                  isCommentAddError={isCommentAddError}\n                  isCommentDeleteError={isCommentDeleteError}\n                />\n              </div>\n            )}\n\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport function getUsers(): Promise<User[]> {\n  return client.get('/users');\n}\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (postId: number, newComment: Comment) => {\n  return client.post<Comment []>(`/comments?postId=${postId}`, newComment);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}